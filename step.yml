#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: |-
  Upload Gradle Dependencies
summary: |
  Uploads gradle dependencies to Github Dependency Graph
description: |
  This step uses the Github Dependency Graph Gradle plugin in order to generate a comprehensive dependency
  graph for this project, and uploads it to Github using the Github Dependency Submission REST API.
website: https://github.com/esteluk/bitrise-step-upload-gradle-github-dependencies
source_code_url: https://github.com/esteluk/bitrise-step-upload-gradle-github-dependencies
support_url: https://github.com/esteluk/bitrise-step-upload-gradle-github-dependencies/issues

# If this step should be available only for certain project types
# just uncomment this `project_type_tags` section and include all the
# project types supported by the step. If the step can be used for all
# project types then you can just remove this section.
# If no `project_type_tags` specified (or specified as an empty array)
# that means the step can be used for any project type.
# You can find more information about project type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
#
project_type_tags:
#   - ios
#   - macos
  - android
#   - xamarin
#   - react-native
#   - cordova
#   - ionic
#   - flutter

# Type tags are used for categorizing steps, for easier step discovery in Step Libraries.
# You can find more information about type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
type_tags:
  - artifact-info

# These properties define whether a Step is run in a given Workflow or not.
# You can find more information about this in the documentation here:
# https://devcenter.bitrise.io/en/steps-and-workflows/developing-your-own-bitrise-step/developing-a-new-step.html#setting-conditions-for-running-the-step
#
# is_always_run: false
# is_skippable: false
# run_if: ""

# Use the `deps` property to declare dependencies that you can fetch from an OS dependency manager.
# You can find more information about this in the documentation here:
# https://devcenter.bitrise.io/en/steps-and-workflows/developing-your-own-bitrise-step/developing-a-new-step.html#submodules-and-step-dependencies
#
# deps:
#   brew:
#   - name: cmake
#   apt_get:
#   - name: cmake


toolkit:
  go:
    package_name: github.com/esteluk/bitrise-step-upload-gradle-github-dependencies


inputs:

  - gradlew_path: $GRADLEW_PATH
    opts:
      category: Config
      title: gradlew file path
      description: |
        Using a Gradle Wrapper (gradlew) is required, as the wrapper ensures
        that the right Gradle version is installed and used for the build.
        You can find more information about the Gradle Wrapper (gradlew),
        and about how you can generate one
        in the official guide at: [https://docs.gradle.org/current/userguide/gradle_wrapper.html](https://docs.gradle.org/current/userguide/gradle_wrapper.html).
        The path should be relative to the repository root. For example, `./gradlew`,
        or if it is in a sub directory, `./sub/dir/gradlew`.
      is_required: true

  - github_access_token:
    opts:
      title: "Github Access Token"
      summary: Access token used to authenticate with the Github API
      is_expand: true
      is_required: true
      is_sensitive: true

  - included_projects:
    opts:
      category: Filtering dependencies
      title: "Included projects"
      summary: A regex of projects whose dependencies should be included in the dependency graph. Defaults to include all projects.
      is_expand: true

  - excluded_projects:
    opts:
      category: Filtering dependencies
      title: "Excluded projects"
      summary: A regex of projects whose dependencies should be excluded in the dependency graph. Defaults to exclude no projects.
      is_expand: true

  - included_configurations:
    opts:
      category: Filtering dependencies
      title: "Included configurations"
      summary: A regex of configurations whose dependencies should be included in the dependency graph. Defaults to include all configurations.
      is_expand: true

  - excluded_configurations:
    opts:
      category: Filtering dependencies
      title: "Excluded configurations"
      summary: A regex of configurations whose dependencies should be excluded in the dependency graph. Defaults to exclude no configurations.
      is_expand: true

  - runtime_included_projects:
    opts:
      category: Controlling dependency scope
      title: "Runtime included projects"
      summary: A regex of projects whose dependencies should be given a runtime scope in the dependency graph. Defaults to include all projects.
      description: |
        Dependencies in Github's dependency graph can be identified as having either a Runtime or a Development scope,
        this helps us to identify those dependencies that are only used within eg. a project's test harness. 
      is_expand: true
      is_required: false

  - runtime_excluded_projects:
    opts:
      category: Controlling dependency scope
      title: "Runtime excluded projects"
      summary: A regex of projects whose dependencies that do not provide runtime scoped dependencies. Defaults to exclude no projects.
      is_expand: true

  - runtime_included_configurations:
    opts:
      category: Controlling dependency scope
      title: "Runtime included configurations"
      summary: A regex of configurations whose dependencies should be given a runtime scope in the dependency graph. Defaults to include all configurations.
      is_expand: true

  - runtime_excluded_configurations:
    opts:
      category: Controlling dependency scope
      title: "Runtime excluded configurations"
      summary: A regex of configurations whose dependencies that do not provide runtime scoped dependencies. Defaults to exclude no configurations.
      is_expand: true

outputs:
  - GITHUB_DEPENDENCY_GRAPH:
    opts:
      title: Path to Github dependency graph
      summary: The dependency graph that is submitted to Github
